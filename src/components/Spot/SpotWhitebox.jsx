import styled from "styled-components";
import { useNavigate } from "react-router-dom";
import { useState, useCallback } from "react";
import { DndProvider } from 'react-dnd';
import { HTML5Backend } from 'react-dnd-html5-backend';
import { TouchBackend } from 'react-dnd-touch-backend';
import useSheetDrag from "../../hooks/common/useSheetDrag";
import RouteListItem from "./RouteListItem";
import { useSavedPlaceContext } from "../../contexts/SavedPlaceContext";
import ShareModal from "./ShareModal";
import { useTranslation } from "react-i18next";




const SpotWhiteBoxContainer = styled.div`
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    z-index: 50;
    display: flex;
    flex-direction: column;
    border-top-left-radius: 20px;
    border-top-right-radius: 20px;
    background-color: white;
    /* ÎÜíÏù¥Îäî Îü∞ÌÉÄÏûÑÏóêÏÑú yÏóê Îî∞Îùº ÎèôÏ†ÅÏúºÎ°ú ÏÑ§Ï†ïÎê©ÎãàÎã§ */
    width: 100%;
    align-items: center;
    box-sizing: border-box;
    box-shadow: 0 -8px 24px rgba(0,0,0,0.12);
    will-change: transform;
    overflow-y: auto;
    -webkit-overflow-scrolling: touch;
    overscroll-behavior: contain;
    &::-webkit-scrollbar {
        display: none;
    }

    scrollbar-width: none; 
    -ms-overflow-style: none;
    margin-top: 60px;
`;

const DragHandle = styled.div`
    position: sticky;
    top: 0;
    z-index: 2;
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 8px 0 6px 0;
    border-top-left-radius: 20px;
    border-top-right-radius: 20px;
    touch-action: none; /* Í∞ÄÎ°ú/ÏÑ∏Î°ú Ïä§ÏôÄÏù¥ÌîÑ Ï∂©Îèå Î∞©ÏßÄ */
    cursor: grab;
    &::before {
        content: "";
        width: 40px;
        height: 4px;
        border-radius: 2px;
        background: #E5E7EB;
    }
    &:active { cursor: grabbing; }
`;
const Title = styled.p`
    font-size: 12px;
    font-weight: 300;
    margin: 10px 0 6px 0;
    padding-left: 18px;
    width: 100%;
    text-align: start;
`;

const SavedPlaceList = styled.div`
    display: flex;
    flex-direction: column;
    width: 100%;
    /* ÎìúÎûòÍ∑∏ Ïï§ ÎìúÎ°≠ÏùÑ ÏúÑÌïú ÌÑ∞Ïπò Ïï°ÏÖò ÌóàÏö© */
    touch-action: manipulation;
`;

const ButtonContainer = styled.div`
    display: flex;
    flex-direction: column;
    width: 100%;
    padding: 20px 16px 100px 16px;
    gap: 12px;
`;

const ActionButton = styled.button`
    width: 100%;
    height: 48px;
    border-radius: 8px;
    border: none;
    font-size: 16px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
    
    &.primary {
        background-color: #271932;
        color: white;
        
        &:hover {
            background-color: #1f1428;
        }
        
        &:active {
            background-color: #150e1a;
        }
    }
    
    &.secondary {
        background-color: #f8f9fa;
        color: #2A2A2A;
        border: 1px solid #e9ecef;
        
        &:hover {
            background-color: #e9ecef;
        }
        
        &:active {
            background-color: #dee2e6;
        }
    }
`;

const SpotWhiteBox = ({ expandedTop = 96, collapsedTop = 520 }) => {
    const navigate = useNavigate();
    const { t } = useTranslation();

    // Ï†ÄÏû•Îêú Ïû•ÏÜåÎì§ÏùÑ Í¥ÄÎ¶¨ÌïòÎäî Ïª§Ïä§ÌÖÄ ÌõÖ
    const { savedPlaces, setSavedPlaces } = useSavedPlaceContext();

    // Í≥µÏú† Î™®Îã¨ ÏÉÅÌÉú
    const [isShareModalOpen, setIsShareModalOpen] = useState(false);
    const [shareData, setShareData] = useState(null);

    // ÌÑ∞Ïπò Í∏∞Îä•ÏùÑ ÏúÑÌïú Î∞±ÏóîÎìú ÏÑ†ÌÉù
    const isTouchDevice = 'ontouchstart' in window;
    const dndBackend = isTouchDevice ? TouchBackend : HTML5Backend;
    const backendOptions = isTouchDevice ? {
        enableMouseEvents: true,
        delayTouchStart: 200,
        delayMouseStart: 0,
        touchSlop: 5,
    } : {};

    const {
        y,
        dragging,
        onPointerDown,
        onPointerMove,
        onPointerUp,
        snapTo,
    } = useSheetDrag({ expandedTop, collapsedTop, start: 'collapsed' });

    // ÎìúÎûòÍ∑∏ Ïï§ ÎìúÎ°≠ÏúºÎ°ú ÏàúÏÑú Î≥ÄÍ≤ΩÌïòÎäî Ìï®Ïàò
    const movePlace = useCallback((dragIndex, hoverIndex) => {
        const draggedPlace = savedPlaces[dragIndex];
        const newPlaces = [...savedPlaces];
        
        // ÎìúÎûòÍ∑∏Îêú ÏïÑÏù¥ÌÖúÏùÑ Ï†úÍ±∞
        newPlaces.splice(dragIndex, 1);
        // ÏÉà ÏúÑÏπòÏóê ÏÇΩÏûÖ
        newPlaces.splice(hoverIndex, 0, draggedPlace);
        
        setSavedPlaces(newPlaces);
        
        // localStorageÏóêÎèÑ Î≥ÄÍ≤ΩÎêú ÏàúÏÑú Ï†ÄÏû•
        try {
            localStorage.setItem('favoritePlaces', JSON.stringify(newPlaces));
            console.log('üìù ÎìúÎûòÍ∑∏ Ïï§ ÎìúÎ°≠ÏúºÎ°ú ÏàúÏÑú Î≥ÄÍ≤Ω ÌõÑ localStorage ÏóÖÎç∞Ïù¥Ìä∏:', newPlaces);
        } catch (error) {
            console.error('‚ùå localStorage ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®:', error);
        }
    }, [savedPlaces, setSavedPlaces]);

    // ÏùºÏ†ï Ï∂îÍ∞ÄÌïòÍ∏∞ Î≤ÑÌäº ÌÅ¥Î¶≠ Ìï∏Îì§Îü¨
    const handleAddToPlan = () => {
        navigate('/');
    };

    // Í≥µÏú†ÌïòÍ∏∞ Î≤ÑÌäº ÌÅ¥Î¶≠ Ìï∏Îì§Îü¨ 
    const handleShare = () => {
        // ÌôúÏÑ±ÌôîÎêú Ïû•ÏÜåÎì§Îßå ÌïÑÌÑ∞ÎßÅ
        const activePlaces = savedPlaces.filter(place => place.isEnabled !== false);
        
        if (activePlaces.length < 2) {
            alert('Í≥µÏú†ÌïòÎ†§Î©¥ ÏµúÏÜå 2Í∞ú Ïù¥ÏÉÅÏùò Ïû•ÏÜåÍ∞Ä ÌïÑÏöîÌï©ÎãàÎã§.');
            return;
        }

        // Ï≤´ Î≤àÏß∏ÏôÄ ÎßàÏßÄÎßâ Ïû•ÏÜåÎ•º Ï∂úÎ∞úÏßÄ/ÎèÑÏ∞©ÏßÄÎ°ú ÏÑ§Ï†ï
        const startPlace = activePlaces[0];
        const endPlace = activePlaces[activePlaces.length - 1];

        // Í≥µÏú† Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ± (places ÌïÑÎìú Ï†úÍ±∞)
        const shareData = {
            start: {
                name: startPlace.place_name || startPlace.name || 'Ï∂úÎ∞úÏßÄ',
                x: startPlace.x || startPlace.lng || startPlace.longitude,
                y: startPlace.y || startPlace.lat || startPlace.latitude
            },
            end: {
                name: endPlace.place_name || endPlace.name || 'ÎèÑÏ∞©ÏßÄ', 
                x: endPlace.x || endPlace.lng || endPlace.longitude,
                y: endPlace.y || endPlace.lat || endPlace.latitude
            },
            ui: {
                selected_mode: 'car', // Í∏∞Î≥∏Í∞í
                map_theme: 'light',
                show_order_badges: true
            }
        };

        console.log('üîó Í≥µÏú† Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±:', shareData);
        setShareData(shareData);
        setIsShareModalOpen(true);
    };

    return (
        <DndProvider backend={dndBackend} options={backendOptions}>
            <SpotWhiteBoxContainer
                style={{
                    transform: `translate3d(0, ${y}px, 0)`,
                    height: `${812 - y}px`,
                    transition: dragging ? 'none' : 'transform 240ms cubic-bezier(0.22, 1, 0.36, 1), height 240ms cubic-bezier(0.22, 1, 0.36, 1)'
                }}
            >
                <DragHandle
                    onPointerDown={onPointerDown}
                    onPointerMove={onPointerMove}
                    onPointerUp={onPointerUp}
                    onPointerCancel={onPointerUp}
                />

                <Title>
                    {t("spot.change")}
                </Title>
                <SavedPlaceList>
                    {savedPlaces && savedPlaces.length > 0 ? (
                        (() => {
                            // ÌôúÏÑ±ÌôîÎêú Ïû•ÏÜåÏôÄ ÎπÑÌôúÏÑ±ÌôîÎêú Ïû•ÏÜåÎ•º Î∂ÑÎ¶¨
                            const activePlaces = savedPlaces.filter(place => place.isEnabled !== false);
                            const inactivePlaces = savedPlaces.filter(place => place.isEnabled === false);
                            const sortedPlaces = [...activePlaces, ...inactivePlaces];
                            
                            let activeIndex = 1; // ÌôúÏÑ±ÌôîÎêú Ïû•ÏÜåÏùò Î≤àÌò∏ Ïπ¥Ïö¥ÌÑ∞
                            
                            return sortedPlaces.map((place, index) => {
                                const displayIndex = place.isEnabled !== false ? activeIndex++ : null;
                                
                                return (
                                    <RouteListItem
                                        key={place.id || place.place_name || place.name}
                                        place={place}
                                        index={displayIndex}
                                        arrayIndex={savedPlaces.findIndex(p => 
                                            (p.id || p.place_name || p.name) === (place.id || place.place_name || place.name)
                                        )}
                                        movePlace={movePlace}
                                    />
                                );
                            });
                        })()
                    ) : (
                        <div style={{ textAlign: 'center', color: '#8A8A8A', fontSize: 14, padding: '40px 20px' }}>
                            {t("spot.noplace")}<br />
                            {t("spot.pick")}
                        </div>
                    )}
                </SavedPlaceList>

                {/* ÌôúÏÑ±ÌôîÎêú Ïû•ÏÜåÍ∞Ä ÏûàÏùÑ ÎïåÎßå Î≤ÑÌäº ÌëúÏãú */}
                {savedPlaces && savedPlaces.some(place => place.isEnabled !== false) && (
                    <ButtonContainer>
                        <ActionButton className="primary" onClick={handleAddToPlan}>
                            ÏùºÏ†ï Ï∂îÍ∞ÄÌïòÍ∏∞
                        </ActionButton>
                        <ActionButton className="secondary" onClick={handleShare}>
                            Í≥µÏú†ÌïòÍ∏∞
                        </ActionButton>
                    </ButtonContainer>
                )}
            </SpotWhiteBoxContainer>
            
            {/* Í≥µÏú† Î™®Îã¨ */}
            <ShareModal
                isOpen={isShareModalOpen}
                onClose={() => setIsShareModalOpen(false)}
                shareData={shareData}
            />
        </DndProvider>
    );
};

export default SpotWhiteBox;